generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DB_URL")
}

enum Role {
  ADMIN // creater of board
  PROJECT_MANAGER // manages users/issues
  DEVELOPER // fixes issues
  SUBMITTER // submits issues
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  OPEN
  UNDER_DEVELOPMENT
  CLOSED
}

model User {
  id        String   @id @default(uuid()) // enhanced security
  firstName String
  lastName  String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  createdProjects Project[]     @relation("UserCreatedProjects") // a user can create many projects
  projects        Project[] // many users can be in many projects
  projectUser     ProjectUser[]
}

model Project {
  id        String   @id @default(uuid())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relationships
  createdBy   User          @relation("UserCreatedProjects", fields: [createdById], references: [id])
  createdById String
  members     User[]
  projectUser ProjectUser[]
  issues      Issue[]
}

// junction model needed to handle relationship between users and projects
model ProjectUser {
  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  role      Role
  issuesSubmitted Issue[] @relation("SubmitterProjectUser")
  issuesUpdated   Issue[] @relation("UpdatedByUser")

  @@unique([projectId, userId]) // only one role per project
}

model Issue {
  id          String   @id @default(uuid())
  title       String
  description String
  priority    Priority
  status      Status   @default(OPEN)
  submitter   ProjectUser     @relation("SubmitterProjectUser", fields: [submitterId, projectId], references: [userId, projectId])
  submitterId String
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  updatedBy   ProjectUser?     @relation("UpdatedByUser", fields: [updatedById, projectId], references: [userId, projectId]) // the user who last updated the issue
  updatedById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
